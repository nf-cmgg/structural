/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    def callers = params.callers.tokenize(",")
    def output_callers = params.output_callers

    publishDir = [
        enabled: false
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        MAIN FLOW
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '.*:CMGGSTRUCTURAL:BEDTOOLS_SORT$' {
        ext.suffix = "bed"
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        STRUCTURAL VARIANT CALLING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    //
    // Delly
    //

    if("delly" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_DELLY:DELLY_CALL\$' {
            ext.args = {"--svtype ${params.delly_sv_types} --map-qual ${params.delly_map_qual} --min-clique-size ${params.delly_min_clique_size}"}
            ext.suffix = "vcf"
            ext.prefix = {"${meta.id}_delly"}
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/delly" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_delly.vcf.gz(.tbi)?$/ ? filename.replace('_delly', '') : null }
            ]
        }

        // withName: '^.*:BAM_VARIANT_CALLING_DELLY:BCFTOOLS_SORT\$' {
        //     ext.prefix = {"${meta.id}_delly"}
        //     publishDir = [
        //         enabled: callers.size() == 1 || output_callers,
        //         overwrite: true,
        //         path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/delly" : "${params.outdir}/${meta.id}" },
        //         mode: params.publish_dir_mode,
        //         saveAs: { filename -> filename ==~ /^.*_delly.vcf.gz$/ ? filename.replace('_delly', '') : null }
        //     ]
        // }

        // withName: '^.*:BAM_VARIANT_CALLING_DELLY:TABIX_TABIX\$' {
        //     publishDir = [
        //         enabled: callers.size() == 1 || output_callers,
        //         overwrite: true,
        //         path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/delly" : "${params.outdir}/${meta.id}" },
        //         mode: params.publish_dir_mode,
        //         saveAs: { filename -> filename ==~ /^.*_delly.vcf.gz.tbi$/ ? filename.replace('_delly', '') : null }
        //     ]
        // }
    }

    //
    // Whamg
    //

    if("whamg" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_WHAMG:WHAMG\$' {
            ext.prefix = { "${meta.id}_whamg" }
            ext.args = {[
                meta.region ? "-r ${meta.region}" : "" ,
                "-z"
            ].join(' ').trim()}
            publishDir = [
                enabled: (callers.size() == 1 || output_callers),
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/whamg" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_whamg.vcf.gz/ ? filename.replace("whamg", "") : null }
            ]
        }
    }

    //
    // Manta
    //

    if("manta" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_MANTA:MANTA_CONVERTINVERSION\$' {
            ext.prefix = { "${meta.id}_manta" }
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/manta" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_manta.vcf.gz.tbi$/ ? filename.replace("_manta", "") :
                                    filename ==~ /^.*_manta.vcf.gz$/ ? filename.replace("_manta", "") :
                                    null }
            ]
        }
    }

    //
    // Scramble
    //

    if("scramble" in callers){
        withName: '.*:BAM_VARIANT_CALLING_SCRAMBLE:SCRAMBLE_CLUSTERANALYSIS\$' {
            ext.args = "--eval-meis"
        }
    }

    //
    // Smoove
    //

    if("smoove" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_SMOOVE:BCFTOOLS_SORT\$' {
            ext.prefix = { "${meta.id}_smoove" }
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/smoove" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_smoove.vcf.gz$/ ? filename.replace("_smoove", "") : null }
            ]
        }

        withName: '^.*:BAM_VARIANT_CALLING_SMOOVE:TABIX_TABIX\$' {
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/smoove" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_smoove.vcf.gz.tbi$/ ? filename.replace("_smoove", "") : null }
            ]
        }
    }

    //
    // Gridss
    //

    if("gridss" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_GRIDSS:GRIDSS_GRIDSS\$' {
            ext.args = "--steps preprocess,assemble,call"
        }

        withName: '^.*:BAM_VARIANT_CALLING_GRIDSS:SIMPLE_EVENT_ANNOTATION\$' {
            ext.prefix = { "${meta.id}_gridss" }
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/gridss" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_gridss.vcf.gz$/ ? filename.replace("_gridss", "") : null }
            ]
        }

        withName: '^.*:BAM_VARIANT_CALLING_GRIDSS:TABIX_TABIX\$' {
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/gridss" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_gridss.vcf.gz.tbi$/ ? filename.replace("_gridss", "") : null }
            ]
        }
    }

    //
    // Standardize VCFs
    //

    withName: VIOLA {
        ext.prefix = {"${meta.id}_${meta.caller}_standardized"}
    }

    //
    // Merge VCFS
    //

    if(callers.size() > 1){
        withName: "^.*:VCF_MERGE_JASMINE:JASMINESV\$" {
            ext.args = "min_support=${params.callers_support} --allow_intrasample"
        }

        withName: "^.*:VCF_MERGE_JASMINE:REHEADER_CALLED_VCFS\$" {
            ext.prefix = { "${meta.id}_reheadered" }
        }

        withName: "^.*:VCF_MERGE_JASMINE:BCFTOOLS_SORT\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ ? filename : null }
            ]
        }

        withName: "^.*:VCF_MERGE_JASMINE:TABIX_TABIX\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*.vcf.gz.tbi$/ ? filename : null }
            ]
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        STRUCTURAL VARIANT GENOTYPING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:VCF_GENOTYPE_SV_PARAGRAPH:PARAGRAPH_MULTIGRMPY\$" {
        ext.prefix = {"${meta.id}_genotyped"}
        ext.args = "--ins-info-key SVINSSEQ"
        publishDir = [
            enabled: !params.annotate,
            overwrite: true,
            path: { "${params.outdir}/ready/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ && meta.family_count == 1 ? filename.replace("_genotyped","") : null }
        ]
    }

    withName: "^.*:VCF_GENOTYPE_SV_PARAGRAPH:BCFTOOLS_MERGE\$" {
        publishDir = [
            enabled: !params.annotate,
            overwrite: true,
            path: { "${params.outdir}/ready/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ ? filename : null }
        ]
    }

    withName: "^.*:VCF_GENOTYPE_SV_PARAGRAPH:TABIX_FAMILY\$" {
        publishDir = [
            enabled: !params.annotate,
            overwrite: true,
            path: { "${params.outdir}/ready/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename ==~ /^.*.vcf.gz.tbi$/ ? filename.replace("_genotyped", "") : null }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ANNOTATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(params.annotate){

        withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:ANNOTSV_ANNOTSV\$" {
            ext.args = "-vcf 1"
        }

        withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:TABIX_ANNOTSV\$" {
            ext.prefix = params.annotsv_file_name
        }

        withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:ENSEMBLVEP_VEP\$" {
            container = {workflow.stubRun ? "quay.io/biocontainers/ensembl-vep:108.2--pl5321h4a94de4_0" : "nfcore/vep:${params.vep_version}.${params.genome}"}
            ext.prefix = {"${meta.id}_annotated"}
            ext.args = {[
                // specify we use VCF files
                '--format vcf',
                // don't contact external db
                '--offline',
                // increase buffer_size to speed up analysis
                '--buffer_size 100000',
                // output format options
                '--vcf --compress_output bgzip --force_overwrite',
                // annotation options
                '--variant_class --sift b --polyphen b --humdiv --allele_number --numbers --total_length --gene_phenotype --ccds --regulatory',
                // identifiers
                '--hgvs --hgvsg --shift_hgvs 1 --protein --symbol --ccds --uniprot --tsl --appris --canonical --mane --biotype --domains',
                // co-located variant info
                '--check_existing --clin_sig_allele 1 --af --max_af --af_1kg --af_gnomad --pubmed --var_synonyms',
                // specific options for structural variants
                '--overlaps', // TODO define the best configuration for --max_sv_size and --batch_size
                // plugins
                (params.vep_structuralvariantoverlap && params.gnomad_sv) ?         "--plugin StructuralVariantOverlap,file=${params.gnomad_sv.split('/')[-1]}" : "",
                (params.vep_structuralvariantoverlap && params.genomes1000_sv) ?    "--plugin StructuralVariantOverlap,file=${params.genomes1000_sv.split('/')[-1]}": "",
                (params.vep_phenotypes) ?                                           "--plugin Phenotypes,file=${params.phenotypes.split('/')[-1]}": ""
            ].join(' ').trim()}
        }

        withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:TABIX_ANNOTATED\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/ready/${meta.family}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ]
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        REST OF THE PIPELINE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    def callers = params.callers.tokenize(",")
    def output_callers = params.output_callers
    def count_types = 0

    publishDir = [
        enabled: false
    ]

    // When making changes here, make sure to also update the following files: lib/GlobalVariables.groovy
    def svCallers = ["delly", "manta", "smoove", "gridss"]
    def cnvCallers = ["qdnaseq", "wisecondorx"]
    def repeatsCallers = ["expansionhunter"]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        MAIN FLOW
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '^.*:ENSEMBLVEP_DOWNLOAD\$' {
        container = {"quay.io/biocontainers/ensembl-vep:${params.vep_version}--pl5321h4a94de4_${task.attempt-1}"}
        ext.args = "--AUTO c --CONVERT --NO_BIOPERL --NO_TEST --NO_UPDATE"
    }

    if("gridss" in callers) {
        withName: '^.*:BWA_INDEX\$' {
            ext.prefix = { "${fasta}" }
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        STRUCTURAL VARIANT CALLING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(callers.intersect(svCallers)){
        count_types++

        //
        // Delly
        //

        if("delly" in callers){
            withName: '^.*:BAM_VARIANT_CALLING_DELLY:DELLY_CALL\$' {
                ext.args = {"--svtype ${params.delly_sv_types} --map-qual ${params.delly_map_qual} --min-clique-size ${params.delly_min_clique_size}"}
                ext.suffix = "vcf"
                ext.prefix = { "${meta.id}.delly" }
                publishDir = [
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/delly" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]
            }
        }

        //
        // Whamg
        //

        if("whamg" in callers){
            withName: '^.*:BAM_VARIANT_CALLING_WHAMG:WHAMG\$' {
                ext.prefix = { "${meta.id}.whamg" }
                ext.args = {[
                    meta.region ? "-r ${meta.region}" : "" ,
                    "-z"
                ].join(' ').trim()}
                publishDir = [
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/whamg" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]
            }
        }

        //
        // Manta
        //

        if("manta" in callers){
            withName: "^.*:MANTA_.*\$" {
                container = "quay.io/cmgg/manta:1.6.0"
            }

            withName: '^.*:BAM_VARIANT_CALLING_MANTA:MANTA_CONVERTINVERSION\$' {
                ext.prefix = { "${meta.id}.manta" }
                publishDir = [
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/manta" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]
            }
        }

        //
        // Scramble
        //

        if("scramble" in callers){
            withName: '.*:BAM_VARIANT_CALLING_SCRAMBLE:SCRAMBLE_CLUSTERANALYSIS\$' {
                ext.args = "--eval-meis"
            }
        }

        //
        // Smoove
        //

        if("smoove" in callers){
            withName: '^.*:BAM_VARIANT_CALLING_SMOOVE:BCFTOOLS_SORT\$' {
                ext.prefix = { "${meta.id}.smoove" }
                publishDir = [
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/smoove" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]
            }

            withName: '^.*:BAM_VARIANT_CALLING_SMOOVE:TABIX_TABIX\$' {
                publishDir = [
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/smoove" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]
            }
        }

        //
        // Gridss
        //

        if("gridss" in callers){
            withName: '^.*:BAM_VARIANT_CALLING_GRIDSS:GRIDSS_GRIDSS\$' {
                cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
                memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
                ext.prefix = { "${meta.id}.gridss" }
                ext.args = { [
                    "--steps preprocess,assemble,call",
                    "--otherjvmheap ${task.memory.toGiga() > 10 ? 4 : 2}g",
                    "--jvmheap ${task.memory.toGiga() > 10 ? task.memory.toGiga() - 8 : 2}g"
                ].join(" ") }
                publishDir = [
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/gridss" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ ? filename : null }
                ]
            }

            withName: '^.*:BAM_VARIANT_CALLING_GRIDSS:TABIX_TABIX\$' {
                publishDir = [
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/gridss" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]
            }

            withName: "^.*:BAM_VARIANT_CALLING_GRIDSS:VIOLA\$" {
                time   = { check_max( 20.h  * task.attempt, 'time') }
                ext.prefix = { "${meta.id}.viola" }
                ext.args = { meta.read_length ? "--read_length ${meta.read_length}" : ""}
            }

            withName: "^.*:BAM_VARIANT_CALLING_GRIDSS:BCFTOOLS_SORT\$" {
                ext.prefix = { "${meta.id}.gridss" }
            }
        }

        //
        // Merge VCFS
        //

        withName: "^.*:VCF_MERGE_JASMINE:JASMINESV\$" {
            ext.args = "min_support=${params.callers_support} --allow_intrasample"
        }

        withName: "^.*:VCF_MERGE_JASMINE:REHEADER_CALLED_VCFS\$" {
            ext.prefix = { "${meta.id}_reheadered" }
            ext.args2 = "--output-type z"
        }

        withName: "^.*:VCF_MERGE_JASMINE:BCFTOOLS_SORT\$" {
            ext.prefix = { "${meta.id}.sv" }
            publishDir = [
                enabled: !params.annotate,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ]
        }

        withName: "^.*:VCF_MERGE_JASMINE:TABIX_TABIX\$" {
            publishDir = [
                enabled: !params.annotate,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ]
        }

        /*
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            ANNOTATION
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        */

        if(params.annotate){

            withName: "^.*:VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:BCFTOOLS_FILTER\$" {
                ext.prefix = {"${meta.id}.filter"}
                ext.args = "-e 'GT=\"ref\"'"
            }

            withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:ANNOTSV_ANNOTSV\$" {
                ext.args = "-vcf 1 -SVminSize 20"
                ext.prefix = {"${meta.id}.annot"}
            }

            withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:TABIX_ANNOTSV\$" {
                ext.prefix = params.annotsv_file_name
            }

            withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:ENSEMBLVEP_VEP\$" {
                container = {"quay.io/biocontainers/ensembl-vep:${params.vep_version}--pl5321h4a94de4_${task.attempt-1}"}
                ext.prefix = {"${meta.id}_annotated"}
                ext.args = {[
                    // specify we use VCF files
                    '--format vcf',
                    // don't contact external db
                    '--offline',
                    // increase buffer_size to speed up analysis
                    '--buffer_size 100000',
                    // output format options
                    '--vcf --compress_output bgzip --force_overwrite',
                    // co-located variant info
                    '--check_existing',
                    // specific options for structural variants
                    '--overlaps', // TODO define the best configuration for --max_sv_size, --batch_size, --check_svs and --database
                    // plugins
                    (params.vep_phenotypes) ? "--plugin Phenotypes,file=${params.phenotypes.split('/')[-1]}": ""
                ].join(' ').trim()}
            }

            withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:VCFANNO\$" {
                ext.args = "-permissive-overlap -ends"
            }

            withName: "^.*VCF_ANNOTATE_VEP_ANNOTSV_VCFANNO:TABIX_ANNOTATED\$" {
                ext.prefix = { "${meta.id}.sv" }
                publishDir = [
                    enabled: true,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]
            }
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        COPY NUMBER VARIATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(callers.intersect(cnvCallers)){

        // Uncomment when CNV VCF files can be made
        // count_types++

        if("qdnaseq" in callers) {
            withName: "^.*:BAM_VARIANT_CALLING_QDNASEQ:QDNASEQ.*\$" {
                cpus = 1
                memory = { check_max(50.GB * task.attempt, 'memory') }
                ext.prefix = { "${meta.id}.qdnaseq" }
                publishDir = [[
                    enabled: true,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ],[
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/qdnaseq" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]]
            }
        }

        if("wisecondorx" in callers) {
            withName: "^.*:BAM_VARIANT_CALLING_WISECONDORX:WISECONDORX_PREDICT\$" {
                memory = { check_max(50.GB * task.attempt, 'memory') }
                ext.prefix = { "${meta.id}.wisecondorx" }
                publishDir = [[
                    enabled: true,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ],[
                    enabled: output_callers,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}/wisecondorx" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename != "versions.yml" ? filename : null }
                ]]
            }
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        REPEAT ESTIMATION
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(callers.intersect(repeatsCallers)){
        count_types++

        withName: "^.*BAM_REPEAT_ESTIMATION_EXPANSIONHUNTER:BCFTOOLS_FILTER\$" {
            ext.args = "--output-type z -e 'GT=\"mis\"'"
            ext.prefix = { "${meta.id}.repeats" }
            publishDir = [[
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ],[
                enabled: output_callers,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}/expansionhunter" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ]]
        }

        withName: "^.*BAM_REPEAT_ESTIMATION_EXPANSIONHUNTER:TABIX_TABIX\$" {
            publishDir = [[
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ],[
                enabled: output_callers,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}/expansionhunter" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ]]
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        CONCAT OUTPUTS
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    if(count_types > 1 && params.concat_output){

        withName: "^.*VCF_CONCAT_BCFTOOLS:BCFTOOLS_CONCAT\$" {
            ext.args = "--output-type z"
            ext.prefix = { "${meta.id}.concat" }
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ]
        }

        withName: "^.*VCF_CONCAT_BCFTOOLS:TABIX_TABIX\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename != "versions.yml" ? filename : null }
            ]
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        REST OF THE PIPELINE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            enabled: true,
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    def callers = params.callers.tokenize(",")
    def output_callers = params.output_callers

    publishDir = [
        enabled: false
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        MAIN FLOW
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: '.*:CMGGSTRUCTURAL:BEDTOOLS_SORT$' {
        ext.suffix = "bed"
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        STRUCTURAL VARIANT CALLING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: COLLECTREADCOUNTS {
        ext.args = "--format TSV --interval-merging-rule OVERLAPPING_ONLY --disable-read-filter MappingQualityReadFilter"
    }

    //
    // Delly
    //

    if("delly" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_DELLY:DELLY_CALL\$' {
            ext.args = {"--svtype ${params.delly_sv_types}"}
            ext.suffix = "vcf"
        }

        withName: '^.*:BAM_VARIANT_CALLING_DELLY:BCFTOOLS_SORT\$' {
            ext.prefix = {"${meta.id}_delly"}
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/delly" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_delly.vcf.gz$/ ? filename.replace('_delly', '') : null }
            ]
        }

        withName: '^.*:BAM_VARIANT_CALLING_DELLY:TABIX_TABIX\$' {
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/delly" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_delly.vcf.gz.tbi$/ ? filename.replace('_delly', '') : null }
            ]
        }
    }

    //
    // Whamg
    //

    if("whamg" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_WHAMG:WHAMG\$' {
            ext.prefix = { "${meta.id}_whamg" }
            ext.args = {[
                meta.region ? "-r ${meta.region}" : "" ,
                "-z"
            ].join(' ').trim()}
            publishDir = [
                enabled: (callers.size() == 1 || output_callers),
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/whamg" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_whamg.vcf.gz/ ? filename.replace("whamg", "") : null }
            ]
        }
    }

    //
    // Manta
    //

    if("manta" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_MANTA:MANTA_CONVERTINVERSION\$' {
            ext.prefix = { "${meta.id}_manta" }
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/manta" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_manta.vcf.gz.tbi$/ ? filename.replace("_manta", "") :
                                    filename ==~ /^.*_manta.vcf.gz$/ ? filename.replace("_manta", "") :
                                    null }
            ]
        }
    }

    //
    // Scramble
    //

    if("scramble" in callers){
        withName: '.*:BAM_VARIANT_CALLING_SCRAMBLE:SCRAMBLE_CLUSTERANALYSIS\$' {
            ext.args = "--eval-meis"
        }
    }

    //
    // Smoove
    //

    if("smoove" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_SMOOVE:SMOOVE_CALL\$' {
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/smoove" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*-smoove.vcf.gz$/ ? filename.replace('-smoove', '') : null }
            ]
        }

        withName: '^.*:BAM_VARIANT_CALLING_SMOOVE:TABIX_TABIX\$' {
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/smoove" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*-smoove.vcf.gz.tbi$/ ? filename.replace('-smoove', '') : null }
            ]
        }
    }

    //
    // Gridss
    //

    if("gridss" in callers){
        withName: '^.*:BAM_VARIANT_CALLING_GRIDSS:GRIDSS_GRIDSS\$' {
            ext.prefix = { "${meta.id}_gridss" }
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/gridss" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_gridss.vcf.gz$/ ? filename.replace("_gridss", "") : null }
            ]
            ext.args = "--steps preprocess,assemble,call"
        }

        withName: '^.*:BAM_VARIANT_CALLING_GRIDSS:TABIX_TABIX\$' {
            publishDir = [
                enabled: callers.size() == 1 || output_callers,
                overwrite: true,
                path: { callers.size() > 1 ? "${params.outdir}/${meta.id}/gridss" : "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_gridss.vcf.gz.tbi$/ ? filename.replace("_gridss", "") : null }
            ]
        }
    }

    //
    // Gather metrics
    //

    if(params.run_module_metrics){
        withName: COLLECTSVEVIDENCE {
            ext.args = {"--sample-name ${meta.id}"}
        }

        withName: SVTK_STANDARDIZE {
            ext.args = {[
                args    : '',
                caller  : "${meta.caller != "whamg" ? meta.caller : "wham"}"
            ]}
        }

        withName: SVTEST_VCF {
            ext.args = {[
                args   : '',
                types  : "DEL,DUP,INS,INV,BND"
            ]}
        }
    }

    //
    // Merge VCFS
    //

    if(callers.size() > 1){
        withName: "^.*:VCF_MERGE_JASMINE:JASMINESV\$" {
            ext.args = "min_support=1 --allow_intrasample"
        }

        withName: "^.*:VCF_MERGE_JASMINE:REHEADER_CALLED_VCFS\$" {
            ext.prefix = { "${meta.id}_reheadered" }
        }

        withName: "^.*:VCF_MERGE_JASMINE:BCFTOOLS_SORT\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ ? filename : null }
            ]
        }

        withName: "^.*:VCF_MERGE_JASMINE:TABIX_TABIX\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*.vcf.gz.tbi$/ ? filename : null }
            ]
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        STRUCTURAL VARIANT GENOTYPING
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: "^.*:VCF_GENOTYPE_SV_PARAGRAPH:PARAGRAPH_MULTIGRMPY\$" {
        ext.prefix = {"${meta.id}_genotyped"}
        ext.args = "--ins-info-key SVINSSEQ"
        publishDir = [
            enabled: true,
            overwrite: true,
            path: { "${params.outdir}/ready/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ && meta.family_count == 1 ? filename.replace("_genotyped","") : null }
        ]
    }

    withName: "^.*:VCF_GENOTYPE_SV_PARAGRAPH:BCFTOOLS_MERGE\$" {
        ext.prefix = {"${meta.id}"}
        publishDir = [
            enabled: true,
            overwrite: true,
            path: { "${params.outdir}/ready/${meta.family}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ ? filename : null }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        REST OF THE PIPELINE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    def callers = params.callers.tokenize(",")

    publishDir = [
        enabled: false
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        GATHER SAMPLE EVIDENCE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: COLLECTREADCOUNTS {
        ext.args = "--format TSV --interval-merging-rule OVERLAPPING_ONLY --disable-read-filter MappingQualityReadFilter"
    }

    //
    // Delly
    //

    if("delly" in callers){
        withName: '^.*:RUN_DELLY:BEDTOOLS_SPLIT\$' {
            ext.args = "-n ${params.delly_scatter_count}"
        }

        withName: DELLY_CALL {
            ext.args = {"--svtype ${params.delly_sv_types}"}
        }

        withName: '^.*:RUN_DELLY:BCFTOOLS_SORT\$' {
            ext.prefix = {"${meta.id}_sorted"}
            publishDir = [
                enabled: callers.size() == 1,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_sorted.vcf.gz$/ ? filename.replace('_sorted', '') : null }
            ]
        }

        withName: '^.*:RUN_DELLY:TABIX_TABIX\$' {
            publishDir = [
                enabled: callers.size() == 1,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_sorted.vcf.gz.tbi$/ ? filename.replace('_sorted', '') : null }
            ]
        }
    }

    //
    // Whamg
    //

    if("whamg" in callers){
        if(params.whamg_include_bed_file){
            withName: '^.*:RUN_WHAMG:BEDTOOLS_MERGE\$' {
                ext.args = "-d ${params.whamg_bed_overlap}"
                ext.prefix = {"${meta.id}.merged"}
            }

            withName: '^.*:RUN_WHAMG:BCFTOOLS_CONCAT\$' {
                publishDir = [
                    enabled: callers.size() == 1 && params.whamg_include_bed_file,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: '^.*:RUN_WHAMG:TABIX_CONCAT\$' {
                publishDir = [
                    enabled: callers.size() == 1 && params.whamg_include_bed_file,
                    overwrite: true,
                    path: { "${params.outdir}/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }

        withName: WHAMG {
            ext.args = {[
                meta.region ? "-r ${meta.region}" : "" ,
                "-z"
            ].join(' ').trim()}
            publishDir = [
                enabled: callers.size() == 1 && !params.whamg_include_bed_file,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    //
    // Manta
    //

    if("manta" in callers){
        withName: '^.*:RUN_MANTA:MANTA_CONVERTINVERSION\$' {
            publishDir = [
                enabled: callers.size() == 1,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*.vcf.gz.tbi$/ ? filename : null }
            ]
        }

        withName: '^.*:RUN_MANTA:BCFTOOLS_REHEADER\$' {
            ext.args    = {"-s <(echo \"${meta.id}\")"}
            ext.prefix  = {"${meta.id}_correct_header"}
            publishDir = [
                enabled: callers.size() == 1,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*_correct_header.vcf.gz$/ ? filename.replace('_correct_header', '') : null }
            ]
        }
    }

    //
    // Scramble
    //

    if("scramble" in callers){
        withName: SCRAMBLE_CLUSTERANALYSIS {
            ext.args = "--eval-meis"
        }
    }

    //
    // Smoove
    //

    if("smoove" in callers){
        withName: '^.*:RUN_SMOOVE:SMOOVE_CALL\$' {
            publishDir = [
                enabled: callers.size() == 1,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*-smoove.vcf.gz$/ ? filename.replace('-smoove', '') : null }
            ]
        }

        withName: '^.*:RUN_SMOOVE:TABIX_TABIX\$' {
            publishDir = [
                enabled: callers.size() == 1,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*-smoove.vcf.gz.tbi$/ ? filename.replace('-smoove', '') : null }
            ]
        }
    }

    //
    // Gather metrics
    //

    if(params.run_module_metrics){
        withName: COLLECTSVEVIDENCE {
            ext.args = {"--sample-name ${meta.id}"}
        }

        withName: SVTK_STANDARDIZE {
            ext.args = {[
                args    : '',
                caller  : "${meta.caller != "whamg" ? meta.caller : "wham"}"
            ]}
        }

        withName: SVTEST_VCF {
            ext.args = {[
                args   : '',
                types  : "DEL,DUP,INS,INV,BND"
            ]}
        }
    }

    //
    // Merge VCFS
    //

    if(callers.size() > 1){
        withName: "^.*GATHER_SAMPLE_EVIDENCE:MERGE_VCFS:UNZIP_VCFS\$" {
            ext.prefix = {"${meta.caller}_${meta.id}"}
        }

        withName: JASMINESV {
            ext.args = "min_support=3"
        }

        withName: "^.*GATHER_SAMPLE_EVIDENCE:MERGE_VCFS:BGZIP_MERGED\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*.vcf.gz$/ ? filename : null }
            ]
        }

        withName: "^.*GATHER_SAMPLE_EVIDENCE:MERGE_VCFS:TABIX_TABIX\$" {
            publishDir = [
                enabled: true,
                overwrite: true,
                path: { "${params.outdir}/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename ==~ /^.*.vcf.gz.tbi$/ ? filename : null }
            ]
        }
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        REST OF THE PIPELINE
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    // withName: SET_BINS {
    //     ext.binsize = ''
    // }

    // withName: 'CENTER_FOR_MEDICAL_GENETICS_NF_CMGG_STRUCTURAL:NF_CMGG_STRUCTURAL:EVIDENCE_QC:BEDTOOLS_INTERSECT' {
    //     ext.args = '-f 0.49 -wa -u | sort -Vk1,1 -k2,2n -k3,3n'
    //     ext.prefix = 'batch'
    // }

    // withName: INDVIDUAL_QC {
    //     ext.prefix = {"${meta.caller}.${meta.id}"}
    // }

    // withName: PICK_OUTLIERS {
    //     ext.prefix = {"${meta.caller}.${meta.id}"}
    // }

    // withName: TABIX_EVIDENCE {
    //     ext.args = "-s1 -b2 -e2"
    // }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

Changes in module 'nf-core/bcftools/annotate'
--- modules/nf-core/bcftools/annotate/main.nf
+++ modules/nf-core/bcftools/annotate/main.nf
@@ -11,15 +11,16 @@
     tuple val(meta), path(input), path(index), path(annotations), path(annotations_index), path(header_lines)
 
     output:
-    tuple val(meta), path("*.{vcf,vcf.gz,bcf,bcf.gz}"), emit: vcf
-    path "versions.yml"                               , emit: versions
+    tuple val(meta), path("${prefix}.{vcf,vcf.gz,bcf,bcf.gz}"), emit: vcf
+    path "versions.yml"                                       , emit: versions
 
     when:
     task.ext.when == null || task.ext.when
 
     script:
     def args    = task.ext.args ?: ''
-    def prefix  = task.ext.prefix ?: "${meta.id}"
+    prefix  = task.ext.prefix ?: "${meta.id}"
+    def tabix   = task.ext.tabix ? true : false
     def header_file = header_lines ? "--header-lines ${header_lines}" : ''
     def annotations_file = annotations ? "--annotations ${annotations}" : ''
     def extension = args.contains("--output-type b") || args.contains("-Ob") ? "bcf.gz" :
@@ -28,7 +29,13 @@
                     args.contains("--output-type v") || args.contains("-Ov") ? "vcf" :
                     "vcf"
     if ("$input" == "${prefix}.${extension}") error "Input and output names are the same, set prefix in module configuration to disambiguate!"
+    def bgzip_input = input.extension != "gz" ? "bgzip --threads ${task.cpus} ${input.name}" : ""
+    def input_vcf = bgzip_input ? "${input.name}.gz" : input.name
+    def tabix_input = index || !tabix ? "" : "tabix ${input_vcf}"
     """
+    ${bgzip_input}
+    ${tabix_input}
+
     bcftools \\
         annotate \\
         $args \\
@@ -36,7 +43,7 @@
         $header_file \\
         --output ${prefix}.${extension} \\
         --threads $task.cpus \\
-        $input
+        $input_vcf
 
     cat <<-END_VERSIONS > versions.yml
     "${task.process}":
@@ -46,7 +53,7 @@
 
     stub:
     def args = task.ext.args ?: ''
-    def prefix = task.ext.prefix ?: "${meta.id}"
+    prefix = task.ext.prefix ?: "${meta.id}"
     def extension = args.contains("--output-type b") || args.contains("-Ob") ? "bcf.gz" :
                     args.contains("--output-type u") || args.contains("-Ou") ? "bcf" :
                     args.contains("--output-type z") || args.contains("-Oz") ? "vcf.gz" :

************************************************************

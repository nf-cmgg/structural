{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/CenterForMedicalGeneticsGhent/nf-cmgg-structural/master/nextflow_schema.json",
    "title": "CenterForMedicalGeneticsGhent/nf-cmgg-structural pipeline parameters",
    "description": "A nextflow pipeline for calling structural variants",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["input", "outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.(csv|tsv|yaml|yml)$",
                    "schema": "assets/schema_input.json",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row.",
                    "fa_icon": "fas fa-file-csv",
                    "exists": true
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature"
                }
            }
        },
        "reference_genome_options": {
            "title": "Reference genome options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference.",
                    "fa_icon": "fas fa-book",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`. \n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details."
                },
                "fasta": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/plain",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to FASTA genome file.",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified. ",
                    "fa_icon": "far fa-file-code",
                    "exists": true
                },
                "fai": {
                    "type": "string",
                    "description": "The index of the FASTA reference file",
                    "exists": true,
                    "format": "file-path",
                    "pattern": "^\\S+\\.fai$",
                    "mimetype": "text/plain"
                },
                "bwa": {
                    "type": "string",
                    "description": "Path to the BWA index folder",
                    "exists": true,
                    "format": "path"
                },
                "expansionhunter_catalog": {
                    "type": "string",
                    "default": "https://github.com/Illumina/ExpansionHunter/raw/master/variant_catalog/grch38/variant_catalog.json",
                    "description": "Path to the expansionhunter catalog",
                    "exists": true,
                    "pattern": "^\\S+\\.json$",
                    "format": "file-path",
                    "mimetype": "application/json"
                },
                "qdnaseq_male": {
                    "type": "string",
                    "pattern": "^\\S+\\.rda$",
                    "description": "Path to the male qdnaseq reference file",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "application/octet-stream"
                },
                "qdnaseq_female": {
                    "type": "string",
                    "pattern": "^\\S+\\.rda$",
                    "description": "Path to the female qdnaseq reference file",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "application/octet-stream"
                },
                "wisecondorx_reference": {
                    "type": "string",
                    "pattern": "^\\S+\\.npz$",
                    "description": "Path to the wisecondorx reference file",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "application/octet-stream"
                },
                "blacklist": {
                    "type": "string",
                    "pattern": "^\\S+\\.bed$",
                    "description": "Path to the blacklist file",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "text/plain"
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "hidden": true,
                    "help_text": "Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`."
                },
                "genomes_base": {
                    "type": "string",
                    "default": "/references/",
                    "description": "The base path where the references can be found",
                    "exists": true,
                    "format": "directory-path"
                },
                "genomes_ignore": {
                    "type": "boolean",
                    "description": "Whether or not to use the references found in the `--genomes_base` folder"
                },
                "cmgg_config_base": {
                    "type": "string",
                    "default": "/conf/",
                    "description": "The config base path for the cmgg configs",
                    "format": "directory-path"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochromeLogs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true,
                    "exists": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true,
                    "exists": true
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "fa_icon": "fas fa-cog"
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "validationShowHiddenParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "validationSchemaIgnoreParams": {
                    "type": "string",
                    "default": "genomes,test_data,igenomes_base",
                    "description": "Which parameters should be ignored by the validation",
                    "hidden": true
                }
            }
        },
        "pipeline_specific_options": {
            "title": "Pipeline specific options",
            "type": "object",
            "description": "Options specific to the execution of this pipeline",
            "default": "",
            "properties": {
                "callers": {
                    "type": "string",
                    "default": "manta,smoove,delly,expansionhunter,wisecondorx",
                    "description": "A comma-seperated list of callers to use. Can be one or more these: smoove|delly|manta|gridss|expansionhunter. At the moment Gridss runs very slowly compared to all other tools so it's only advised to use it when it's needed."
                },
                "output_callers": {
                    "type": "boolean",
                    "description": "Output the VCF files from different callers. Warning: This produces a lot of additional output and should only be used for testing purposes"
                },
                "sv_callers_support": {
                    "type": "integer",
                    "default": 1,
                    "description": "The minimum amount of SV callers that should detect a variant. All variants that have a lower amount of callers supporting it, will be removed. (Only used when more than one caller is given)"
                },
                "cnv_callers_support": {
                    "type": "integer",
                    "default": 1,
                    "description": "The minimum amount of CNV callers that should detect a variant. All variants that have a lower amount of callers supporting it, will be removed. (Only used when more than one caller is given)"
                },
                "annotate": {
                    "type": "boolean",
                    "description": "Runs the annotation with Ensembl VEP when true"
                },
                "concat_output": {
                    "type": "boolean",
                    "description": "Also output a concatenated VCF with all types analysed included (with the exception of CNVs)"
                },
                "annotations_filter": {
                    "type": "string",
                    "description": "The filter arguments to use after annotating. e.g. to filter out common variants."
                }
            },
            "required": ["callers"]
        },
        "delly_parameters": {
            "title": "Delly parameters",
            "type": "object",
            "description": "Options specific for the Delly execution",
            "default": "",
            "properties": {
                "delly_sv_types": {
                    "type": "string",
                    "default": "ALL",
                    "description": "Which SV types delly should search for in the variant calling"
                },
                "delly_map_qual": {
                    "type": "integer",
                    "default": 1,
                    "description": "The mapping quality to use for delly"
                },
                "delly_min_clique_size": {
                    "type": "integer",
                    "default": 2,
                    "description": "The minimum clique size to use for delly"
                }
            }
        },
        "manta_parameters": {
            "title": "Manta parameters",
            "type": "object",
            "description": "Options specific for the Manta execution",
            "default": "",
            "properties": {
                "manta_config": {
                    "type": "string",
                    "default": "assets/manta_config.ini",
                    "description": "A config file to supply to manta"
                }
            }
        },
        "qdnaseq_parameters": {
            "title": "qDNAseq parameters",
            "type": "object",
            "description": "Options specific for the qDNAseq execution",
            "default": "",
            "properties": {
                "qdnaseq_bin_size": {
                    "type": "integer",
                    "default": 100000,
                    "description": "The bin size to use for qdnaseq",
                    "enum": [5000, 50000, 100000, 500000]
                },
                "qdnaseq_cnv_ratio": {
                    "type": "number",
                    "default": 0.5,
                    "description": "The minimum value of the absolute cnv ratio for a variant to be considered a CNV"
                }
            }
        },
        "vep_options": {
            "title": "VEP options",
            "type": "object",
            "description": "Options for the annotation with VEP",
            "default": "",
            "properties": {
                "vep_assembly": {
                    "type": "string",
                    "default": "GRCh38",
                    "description": "The genome assembly to download the cache of.",
                    "help_text": "This only needs to be supplied when no vep_cache is given"
                },
                "vep_cache_version": {
                    "type": "integer",
                    "default": 108,
                    "description": "The version of the VEP cache to use.",
                    "help_text": "This version should be present in the folder supplied by `--vep_cache`. This version should be the same as `--vep_version` when no VEP cache was given with `--vep_cache`"
                },
                "vep_cache": {
                    "type": "string",
                    "description": "The path to the VEP cache folder",
                    "exists": true,
                    "format": "directory-path"
                },
                "vep_version": {
                    "type": "number",
                    "default": 108.2,
                    "description": "The version of VEP to use"
                },
                "species": {
                    "type": "string",
                    "default": "homo_sapiens",
                    "description": "The species used for the analysis. Should be all lowercase and spaces should be underscorses."
                },
                "vep_phenotypes": {
                    "type": "boolean",
                    "description": "Use the Phenotypes VEP plugin",
                    "help_text": "This requires `--phenotypes` and `--phenotypes_tbi`. "
                },
                "phenotypes": {
                    "type": "string",
                    "description": "Path to the phenotypes GFF file",
                    "exists": true,
                    "format": "file-path",
                    "pattern": "^\\S+\\.gff$",
                    "mimetype": "text/plain"
                },
                "phenotypes_tbi": {
                    "type": "string",
                    "description": "Path to the phenotypes GFF index file",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "application/octet-stream"
                }
            }
        },
        "annotsv_options": {
            "title": "AnnotSV options",
            "type": "object",
            "description": "Options specific to the execution of AnnotSV",
            "default": "",
            "properties": {
                "annotsv_annotations": {
                    "type": "string",
                    "description": "The full path to the AnnotSV annotations folder. This can be a tarzipped folder. When --annotate is set to true and this isn't given, the annotations will be downloaded automatically (this is not recommended though)",
                    "exists": true,
                    "format": "path"
                },
                "annotsv_candidate_genes": {
                    "type": "string",
                    "description": "The full path the candidate genes file for AnnotSV",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "text/plain"
                },
                "annotsv_gene_transcripts": {
                    "type": "string",
                    "description": "The full path to the gene transcripts file for AnnotSV",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "text/plain"
                },
                "annotsv_file_name": {
                    "type": "string",
                    "default": "annotsv_annotated",
                    "hidden": true,
                    "description": "The default name of the AnnotSV VCFs"
                }
            }
        },
        "vcfanno_options": {
            "title": "VCFanno options",
            "type": "object",
            "description": "Options for the execution of AnnotSV",
            "default": "",
            "properties": {
                "vcfanno_toml": {
                    "type": "string",
                    "description": "The full path to the AnnotSV config TOML file. This file will be used to dynamically overwrite default configs for this pipeline run",
                    "exists": true,
                    "pattern": "^\\S+\\.toml$",
                    "format": "file-path",
                    "mimetype": "text/plain"
                },
                "vcfanno_lua": {
                    "type": "string",
                    "description": "The full path to a lua script for VCFanno",
                    "exists": true,
                    "pattern": "^\\S+\\.lua$",
                    "format": "file-path",
                    "mimetype": "text/plain"
                },
                "vcfanno_resources": {
                    "type": "string",
                    "description": "A comma-delimited list of files referenced in the VCFanno config. This can contain glob patterns as well. Place all filenames together between double qoutes to not cause any irregularities"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/reference_genome_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        },
        {
            "$ref": "#/definitions/pipeline_specific_options"
        },
        {
            "$ref": "#/definitions/delly_parameters"
        },
        {
            "$ref": "#/definitions/manta_parameters"
        },
        {
            "$ref": "#/definitions/qdnaseq_parameters"
        },
        {
            "$ref": "#/definitions/vep_options"
        },
        {
            "$ref": "#/definitions/annotsv_options"
        },
        {
            "$ref": "#/definitions/vcfanno_options"
        }
    ]
}

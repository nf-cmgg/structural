nextflow_workflow {

    name "Test Workflow BAM_SV_CALLING"
    script "subworkflows/local/bam_sv_calling/main.nf"
    workflow "BAM_SV_CALLING"

    tag "subworkflows"
    tag "subworkflows_local"
    tag "bam_sv_calling"

    options "-stub"

    config "./nextflow.config"

    test("homo_sapiens - manta") {

        when {
            params {
                callers = "manta"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"test", sample:"test", sex:"male"],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                ])
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ])
                input[3] = [[],[]]
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.reports,
                    workflow.out.vcfs,
                    workflow.trace.succeeded().size(),
                    workflow.trace.failed().size()
                ).match() }
            )
        }

    }

    test("homo_sapiens - delly") {

        when {
            params {
                callers = "delly"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"test", sample:"test", sex:"male"],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                ])
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ])
                input[3] = [[],[]]
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.reports,
                    workflow.out.vcfs,
                    workflow.trace.succeeded().size(),
                    workflow.trace.failed().size()
                ).match() }
            )
        }

    }

    test("homo_sapiens - smoove") {

        when {
            params {
                callers = "smoove"
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"test", sample:"test", sex:"male"],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                ])
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ])
                input[3] = [[],[]]
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.reports,
                    workflow.out.vcfs,
                    workflow.trace.succeeded().size(),
                    workflow.trace.failed().size()
                ).match() }
            )
        }

    }

    // test("homo_sapiens - gridss") {

    //     when {
    //         params {
    //             callers = "gridss"
    //         }
    //         workflow {
    //             """
    //             input[0] = Channel.of([
    //                 [id:"test", sample:"test", sex:"male"],
    //                 file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
    //                 file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
    //             ])
    //             input[1] = Channel.value([
    //                 [id:"fasta"],
    //                 file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
    //             ])
    //             input[2] = Channel.value([
    //                 [id:"fai"],
    //                 file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
    //             ])
    //             input[3] = [[],[]]
    //             input[4] = []
    //             """
    //         }
    //     }

    //     then {
    //         assertAll(
    //             { assert workflow.success },
    //             { assert snapshot(
    //                 workflow.out.reports,
    //                 workflow.out.vcfs,
    //                 workflow.trace.succeeded().size(),
    //                 workflow.trace.failed().size()
    //             ).match() }
    //         )
    //     }

    // }

    test("homo_sapiens - all sv callers") {

        when {
            params {
                callers = "manta,delly,smoove" //,gridss
            }
            workflow {
                """
                input[0] = Channel.of([
                    [id:"test", sample:"test", sex:"male"],
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test_paired_end_sorted_cram_crai'], checkIfExists: true)
                ])
                input[1] = Channel.value([
                    [id:"fasta"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta'], checkIfExists: true)
                ])
                input[2] = Channel.value([
                    [id:"fai"],
                    file(params.test_data['homo_sapiens']['genome']['genome_fasta_fai'], checkIfExists: true)
                ])
                input[3] = [[],[]]
                input[4] = []
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.reports,
                    workflow.out.vcfs,
                    workflow.trace.succeeded().size(),
                    workflow.trace.failed().size()
                ).match() }
            )
        }

    }

}
